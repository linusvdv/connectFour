#ifndef TYPES_H_INCLUDED
#define TYPES_H_INCLUDED


#include <array>
#include <cstdint>


struct position {
    // board layout:
    // 35 36 37 38 39 40 41
    // 28 29 30 31 32 33 34
    // 21 22 23 24 25 26 27
    // 14 15 16 17 18 19 20
    //  7  8  9 10 11 12 13
    //  0  1  2  3  4  5  6
    uint64_t board = 0;
    uint64_t red = 0;
    // -1 red
    //  0 yellow
    uint64_t color = -1;
};


constexpr std::array<uint64_t, 7> columns = {
    0b000000100000010000001000000100000010000001 << 0,
    0b000000100000010000001000000100000010000001 << 1,
    0b000000100000010000001000000100000010000001 << 2,
    0b000000100000010000001000000100000010000001 << 3,
    0b000000100000010000001000000100000010000001 << 4,
    0b000000100000010000001000000100000010000001 << 5,
    0b000000100000010000001000000100000010000001 << 6
};


constexpr std::array<uint64_t, 42> cross = {
    0b1001000010100000110001111000000000000000000000000,
    0b1001000010100000111001111100000000000000000000000,
    0b1001000010101000111001111110000000000000000000000,
    0b1001001010101000111001111111000000000000000000000,
    0b0001001010101000111000111111000000000000000000000,
    0b0001001000101000111000011111000000000000000000000,
    0b0001001000101000011000001111000000000000000000000,
    0b1001000010100000110001111000001100000000000000000,
    0b1001000010100000111001111100001110000000000000000,
    0b1001000010101000111001111110001110000000000000000,
    0b1001001010101000111001111111001110000000000000000,
    0b0001001010101000111000111111001110000000000000000,
    0b0001001000101000111000011111001110000000000000000,
    0b0001001000101000011000001111000110000000000000000,
    0b1001000010100000110001111000001100001010000000000,
    0b1001000010100000111001111100001110001010000000000,
    0b1001000010101000111001111110001110001010100000000,
    0b1001001010101000111001111111001110001010100000000,
    0b0001001010101000111000111111001110001010100000000,
    0b0001001000101000111000011111001110000010100000000,
    0b0001001000101000011000001111000110000010100000000,
    0b0000000010100000110001111000001100001010001001000,
    0b0000000010100000111001111100001110001010001001000,
    0b0000000010101000111001111110001110001010101001000,
    0b0000000010101000111001111111001110001010101001001,
    0b0000000010101000111000111111001110001010100001001,
    0b0000000000101000111000011111001110000010100001001,
    0b0000000000101000011000001111000110000010100001001,
    0b0000000000000000110001111000001100001010001001000,
    0b0000000000000000111001111100001110001010001001000,
    0b0000000000000000111001111110001110001010101001000,
    0b0000000000000000111001111111001110001010101001001,
    0b0000000000000000111000111111001110001010100001001,
    0b0000000000000000111000011111001110000010100001001,
    0b0000000000000000011000001111000110000010100001001,
    0b0000000000000000000001111000001100001010001001000,
    0b0000000000000000000001111100001110001010001001000,
    0b0000000000000000000001111110001110001010101001000,
    0b0000000000000000000001111111001110001010101001001,
    0b0000000000000000000000111111001110001010100001001,
    0b0000000000000000000000011111001110000010100001001,
    0b0000000000000000000000001111000110000010100001001
};


constexpr std::array<uint64_t, 13> connect_four = {
    0b0000000000000000000000001111000000000000000000000,
    0b0000000000000000000000011110000000000000000000000,
    0b0000000000000000000000111100000000000000000000000,
    0b0000000000000000000001111000000000000000000000000,
    0b0000000000000000000000001000000100000010000001000,
    0b0000000000000000000000001000000010000000100000001,
    0b0000000000000000100000001000000010000000100000000,
    0b0000000010000000100000001000000010000000000000000,
    0b1000000010000000100000001000000000000000000000000,
    0b0000000000000000000000001000001000001000001000000,
    0b0000000000000000001000001000001000001000000000000,
    0b0000000000001000001000001000001000000000000000000,
    0b0000001000001000001000001000000000000000000000000
};


#endif
